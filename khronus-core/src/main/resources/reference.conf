khronus {

  windows {
    execution-delay = 20 seconds
  }

  internal-metrics {
    enabled = true
  }

  histogram {
    windows = [30 seconds, 1 minute, 5 minutes, 10 minutes, 30 minutes, 1 hour]
    bucket-retention-policy = 6 hours
    summary-retention-policy = 90 days
    bucket-limit = 30000
    bucket-fetch-size = 1000
    summary-limit = 1000
    summary-fetch-size = 200  }

  counter {
    windows = [30 seconds, 1 minute, 5 minutes, 10 minutes, 30 minutes, 1 hour]
    bucket-retention-policy = 6 hours
    summary-retention-policy = 90 days
    bucket-limit = 30000
    bucket-fetch-size = 1000
    summary-limit = 1000
    summary-fetch-size = 200
  }

  master {
    tick-expression = "0/30 * * * * ?"
    discovery-start-delay = 1 second
    discovery-interval = 5 seconds
    worker-batch-size = 5
  }

  cassandra {
    cluster {
      name = "KhronusCluster"
      max-connections-per-host = 5
      socket-timeout = 3 seconds
      connection-timeout = 2 seconds
      keyspace-name-suffix = ""
    }

    meta {
      rf = 3
    }

    buckets {
      rf = 1
    }

    summaries {
      rf = 1
    }
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = INFO
  stdout-loglevel = DEBUG

  cluster {
    auto-down-unreachable-after = 10s
  }

  # Throughput defines the number of messages that are processed in a batch
  # before the thread is returned to the pool. Set to 1 for as fair as possible.
  # A good idea should be set this with the same as the worker-batch-size in order to process the batch before the thread is released
  actor.default-dispatcher.throughput = 5
}

spray.can.server {
  request-timeout = 3s

  request-chunk-aggregation-limit = 2m
}
